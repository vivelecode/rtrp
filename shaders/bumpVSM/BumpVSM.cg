struct VOut_amb {
    float4 p      : POSITION;
    float2 uv     : TEXCOORD0;
    float3 a      : TEXCOORD1;
    float4 ssaoUV : TEXCOORD2;
};
struct PIn_amb {
    float2 uv     : TEXCOORD0;
    float3 a      : TEXCOORD1;
    float4 ssaoUV : TEXCOORD2;
};

struct VIn
{
    float4 p    : POSITION;
    float3 n    : NORMAL;
    float3 t    : TANGENT;
    float2 uv   : TEXCOORD0;
};
struct VOut
{
    float4 p    : POSITION;
    float2 uv   : TEXCOORD0;
    float4 wp   : TEXCOORD1;
    float3 n    : TEXCOORD2;
    float3 t    : TEXCOORD3;
    float3 b    : TEXCOORD4;
    float3 sdir : TEXCOORD5;
	
	float4 lp   : TEXCOORD6;
};

struct PIn
{   
    float2 uv   : TEXCOORD0;
    float4 wp   : TEXCOORD1;
    float3 n    : TEXCOORD2;
    float3 t    : TEXCOORD3;
    float3 b    : TEXCOORD4;
    float3 sdir : TEXCOORD5;
	float4 lp   : TEXCOORD6;
};

VOut_amb ambient_vs(in float4 p : POSITION, in float2 uv : TEXCOORD0, uniform float3 ambient, uniform float4x4 wvp)
 {
    VOut_amb OUT;
    OUT.p = mul(wvp, p);

    OUT.ssaoUV = OUT.p;
    OUT.a = ambient;
    OUT.uv = uv;
    return OUT;
}

float4 ambient_ps(PIn_amb IN, uniform sampler2D diffuseTex : TEXUNIT0, uniform sampler2D ssaoTex : TEXUNIT1): COLOR0 
{
    float2 ssaoUV = IN.ssaoUV.xy / IN.ssaoUV.w; 

    
    ssaoUV = (float2(ssaoUV.x, -ssaoUV.y) + 1.0) * 0.5;
    float3 ssao = tex2D(ssaoTex, ssaoUV).rgb;

    float3 diffuse = tex2D(diffuseTex, IN.uv).rgb;
	
    return float4(diffuse * IN.a, 1);
}


VOut diffuse_vs(VIn IN,
    uniform float4x4 wMat,
    uniform float4x4 wvpMat,
	uniform float4x4 tvpMat,
    uniform float4 spotlightDir
    )
{
    VOut OUT;
    OUT.wp = mul(wMat, IN.p);
    OUT.p = mul(wvpMat, IN.p);

    OUT.uv = IN.uv;

	
    
	OUT.n = mul(wMat, float4(IN.n, 0)).xyz;
	
    OUT.t = IN.t;
    OUT.b = cross(IN.t, IN.n);
    OUT.sdir = mul(wMat, spotlightDir).xyz; 
	
	
	OUT.lp = mul(tvpMat,OUT.wp);

    return OUT;
}

float4 btex2D(sampler2D map, float2 uv, float radius, float steps)
{
    half stepSize = 2.0 * radius / steps;
    uv.xy -= radius.xx;

    float4 total = float4(0, 0, 0, 0);
    for (int x = 0; x < steps; ++x)
        for (int y = 0; y < steps; ++y)
            total +=
                tex2D(map, float2(uv.xy + float2(x * stepSize, y * stepSize)));

    return total / (steps * steps);
}

float computeShadow(
    sampler2D shadowMap, float4 shadowMapPos, float ourDepth)
{
    float2 suv = shadowMapPos.xy / shadowMapPos.w;

    float2 moments = btex2D(shadowMap, suv, 0.002, 6).rg;
    float litFactor = (ourDepth <= moments.x ? 1 : 0);

    
    float E_x2 = moments.y;
    float Ex_2 = moments.x * moments.x;
    float vsmEpsilon = 0.0001;
    float variance = min(max(E_x2 - Ex_2, 0.0) + vsmEpsilon, 1.0);
    float m_d = moments.x - ourDepth;
    float p = variance / (variance + m_d * m_d);

    return smoothstep(0.4, 1, max(litFactor, p));
}

float4 diffuse_ps(
    PIn IN,
    uniform float3 lightDif0,
    uniform float4 lightPos0,
    uniform float4 lightAtt0,
    uniform float3 lightSpec0,
    uniform float4 matDif,
    uniform float4 matSpec,
    uniform float matShininess,
    uniform float3 camPos,
    uniform float4 invSMSize,
    uniform float4 spotlightParams,
    uniform float4x4 iTWMat,
    uniform sampler2D diffuseMap : TEXUNIT0,
	uniform sampler2D shadowMap : TEXUNIT1,
    uniform sampler2D specMap : TEXUNIT2,
    uniform sampler2D normalMap : TEXUNIT3): COLOR0
{
    
    float3 ld0 = normalize(lightPos0.xyz - (lightPos0.w * IN.wp.xyz));

    half lightDist = length(lightPos0.xyz - IN.wp.xyz) / lightAtt0.r;
    
    half ila = lightDist * lightDist; 
    half la = 1.0 - ila;

	
    float4 normalTex = tex2D(normalMap, IN.uv);
    float3x3 tbn = float3x3(IN.t, IN.b, IN.n);
    float3 normal = mul(transpose(tbn), normalTex.xyz * 2 - 1); 
    normal = normalize(mul((float3x3)iTWMat, normal));
	
    float3 diffuse = max(dot(ld0, normal), 0);

    
    float spot = (spotlightParams.x == 1 &&
        spotlightParams.y == 0 &&
        spotlightParams.z == 0 &&
        spotlightParams.w == 1 ? 1 : 
        saturate(
            (dot(ld0, normalize(-IN.sdir)) - spotlightParams.y) /
            (spotlightParams.x - spotlightParams.y)));

    float3 camDir = normalize(camPos - IN.wp.xyz);
    float3 halfVec = normalize(ld0 + camDir);
    float3 specular = pow(max(dot(normal, halfVec), 0), matShininess);

    float4 diffuseTex = tex2D(diffuseMap, IN.uv);
    float4 specTex = tex2D(specMap, IN.uv);

	
    
	float3 diffuseContrib = (diffuse * lightDif0 * diffuseTex.rgb);
	
    float3 specularContrib = (specular * lightSpec0 * specTex.rgb * matSpec.rgb);
    float3 light0C = (diffuseContrib + specularContrib) * la * spot;
	
	
	float3 shadow = computeShadow(shadowMap,IN.lp,lightDist).xxx;
    
    
    return float4(light0C * shadow, diffuseTex.a);
}